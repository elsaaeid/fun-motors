import { Component } from '@angular/core';
import { MatSnackBar } from '@angular/material/snack-bar';
import { Router } from '@angular/router';
import { FormsModule } from '@angular/forms'; // Import FormsModule for ngModel
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { CommonModule } from '@angular/common';
import { AuthService } from '../../services/auth-service/auth.service';
import { RouterModule } from '@angular/router';
import { User } from '../../models/user.model'; // Import User interface

@Component({
  selector: 'app-register',
  standalone: true,
  imports: [
    FormsModule,
    MatSnackBarModule,
    CommonModule,
    RouterModule
  ],
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.scss']
})
export class RegisterComponent {
  name: string = '';
  email: string = '';
  phone: string = '';
  password: string = '';
  verifyPassword: string = '';

  constructor(private snackBar: MatSnackBar, private router: Router, private authService: AuthService) {}

  submitSignup(): void {
    // Validate form fields
    if (!this.name || !this.email || !this.phone || !this.password || !this.verifyPassword) {
      this.snackBar.open('Please fill in all fields.', 'Close', {
        duration: 3000,
      });
      return;
    }

    // Validate password length
    if (this.password.length < 6) {
      this.snackBar.open('Password must be at least 6 characters long.', 'Close', {
        duration: 3000,
      });
      return;
    }

    // Check if passwords match
    if (this.password !== this.verifyPassword) {
      this.snackBar.open('Passwords do not match.', 'Close', {
        duration: 3000,
      });
      return;
    }

    // Create a user object with all required properties
    const userData: User = {
      id: '', // This can be generated by the backend
      name: this.name,
      email: this.email,
      phone: this.phone,
      password: this.password,
      createdAt: new Date(), // Set to current date
      updatedAt: new Date()   // Set to current date
    };

    // Send the signup data to the backend
    this.authService.register(userData).subscribe({
      next: (response) => {
        this.snackBar.open('You are signed up successfully!', 'Close', {
          duration: 3000,
        });
        // Reset the form
        this.resetForm();
        this.router.navigate(['/login']);
      },
      error: (error) => {
        this.snackBar.open('Signup failed. Please try again.', 'Close', {
          duration: 3000,
        });
        console.error('Signup error:', error);
      }
    });
  }

  private resetForm(): void {
    this.name = '';
    this.email = '';
    this.phone = '';
    this.password = '';
    this.verifyPassword = '';
  }
}